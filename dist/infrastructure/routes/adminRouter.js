"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const adminController_1 = __importDefault(require("../../controller/adminController"));
const adminUseCase_1 = __importDefault(require("../../useCase/adminUseCase"));
const AdminReopository_1 = __importDefault(require("../repository/AdminReopository"));
const jwt_1 = __importDefault(require("../utils/jwt"));
const adminAuth_1 = __importDefault(require("../middleware/adminAuth"));
const UserUseCase_1 = __importDefault(require("../../useCase/UserUseCase"));
const cloudinary_1 = __importDefault(require("../utils/cloudinary"));
const otpGenerate_1 = __importDefault(require("../utils/otpGenerate"));
const sendMail_1 = __importDefault(require("../utils/sendMail"));
const hashPassword_1 = __importDefault(require("../utils/hashPassword"));
const userRepository_1 = __importDefault(require("../repository/userRepository"));
const postRepository_1 = __importDefault(require("../repository/postRepository"));
const roomRepository_1 = __importDefault(require("../repository/roomRepository"));
const followRepository_1 = __importDefault(require("../repository/followRepository"));
const adminRouter = express_1.default.Router();
const Jwt = new jwt_1.default();
const bookingRepository = new AdminReopository_1.default();
const bUseCase = new adminUseCase_1.default(bookingRepository, Jwt);
const cloudinary = new cloudinary_1.default();
const generateOTP = new otpGenerate_1.default();
const sendEmail = new sendMail_1.default();
const hashPass = new hashPassword_1.default();
const userRepository = new userRepository_1.default();
const postRepository = new postRepository_1.default();
const roomRepository = new roomRepository_1.default();
const followRepository = new followRepository_1.default();
const usercase = new UserUseCase_1.default(followRepository, userRepository, postRepository, roomRepository, hashPass, Jwt, cloudinary, generateOTP, sendEmail);
const adminController = new adminController_1.default(bUseCase, usercase);
adminRouter.post('/adminlogin', (req, res) => adminController.adminLogin(req, res));
adminRouter.get('/fetchDashBoardCount', adminAuth_1.default, (req, res) => adminController.fetchDashBoardCount(req, res));
adminRouter.get('/fetchDashBoardGraphData', adminAuth_1.default, (req, res) => adminController.fetchDashBoardGraphData(req, res));
adminRouter.get('/fetchAllUserData', adminAuth_1.default, (req, res) => adminController.fetchAllUserData(req, res));
adminRouter.get('/getUserData', adminAuth_1.default, (req, res) => adminController.getUserData(req, res));
adminRouter.put('/updateUserData', adminAuth_1.default, (req, res) => adminController.updateUserData(req, res));
adminRouter.put('/uploadImg', adminAuth_1.default, (req, res) => adminController.uploadImg(req, res));
adminRouter.put('/handleBlockOrUnblock', adminAuth_1.default, (req, res) => adminController.handleBlockOrUnblock(req, res));
adminRouter.get('/fetchAllBookingData', adminAuth_1.default, (req, res) => adminController.fetchAllBookingData(req, res));
adminRouter.get('/fetchAllPostReportData', adminAuth_1.default, (req, res) => adminController.fetchAllPostReportData(req, res));
adminRouter.get('/findUserPostById', adminAuth_1.default, (req, res) => adminController.findUserPostById(req, res));
adminRouter.delete('/adminDeletePost', adminAuth_1.default, (req, res) => adminController.adminDeletePost(req, res));
exports.default = adminRouter;
